some simple spreadsheet to remember gdb commands

#print source listing
l, list location   # Print lines centered around the line specified by location.
   list first,last # Print lines from first to last. Both arguments are locations.
                   # When a list command has two locations, and the source file of the second location is omitted,
                   # this refers to the same source file as the first location.
   list ,last      # Print lines ending with last.
   list first,     # Print lines starting with first.
   list +          # Print lines just after the lines last printed.
   list -          # Print lines just before the lines last printed.
   list            # same as list -

Location can be specified in these ways:
  LINENUM, to list around that line in current file,
+-LINECOUNT Specifies the line offset lines before/after the last line printed.
  FILE:LINENUM, to list around that line in that file,
  FUNCTION, to list around beginning of that function,
  FILE:FUNCTION, to distinguish among like-named static functions.
  *ADDRESS, to list around the line containing that address.


# set breakpoint
break main
break filename.cpp:14

#running
start       - run program and break immediately
run         - run program
step, s     - step
next, n     - next, step over
finish, fin - finish current subroutine, step out

#frame 
frame, f     - displays the currently selected frame.
frame, f num - Specifies the zero-based frame number that will be selected as a result of running this command.

#inspect objects
p   var - print variable
p/x var - print in hex
p   ptr - print pointer
p  *ptr - print object pointed by ptr

info locals - print local variables
info args   - print function arguments

set print object on
ptype ptr

#info
info sharedLibraries - list of loaded so modules
info threads         - print threads info
info locals          - Print the local variables of the selected frame, each on a separate line.
                       These are all variables (declared either static or automatic) accessible at the point of execution of the selected frame.
info args            - print function arguments

#thread
thread <num>         - switch to thread <num>

info sources                - shows source files and their paths
directory dirname1:dirname2 - Add directory dirname to the front of the source path
set substitute-path from to - adds source path substitution rules


signal SIGINT                     - send SINGINT to process
handle SIGINT nostop print pass   -   will make GDB pass the signal straight to the inferior (being debugged) process.


C-x C-a - turn on/turn off tui mode
C-l     - repaint


objdump --section-headers  executable  - grep for "debug" to see if there are debug headers
objdump --debugging        executable  - parsed debug info, including directories(grep for DW_AT_comp_dir)


Source Pathes:
directory dirname …
dir dirname …
    Add directory dirname to the front of the source path. Several directory names may be given to this command, separated by ‘:’ (‘;’ on MS-DOS and MS-Windows, where ‘:’ usually appears as part of absolute file names) or whitespace. You may specify a directory that is already in the source path; this moves it forward, so GDB searches it sooner.

    The special strings ‘$cdir’ (to refer to the compilation directory, if one is recorded), and ‘$cwd’ (to refer to the current working directory) can also be included in the list of directories dirname. Though these will already be in the source path they will be moved forward in the list so GDB searches them sooner.

directory
    Reset the source path to its default value (‘$cdir:$cwd’ on Unix systems). This requires confirmation.

set directories path-list
    Set the source path to path-list. ‘$cdir:$cwd’ are added if missing.

show directories
    Print the source path: show which directories it contains.

set substitute-path from to
    Define a source path substitution rule, and add it at the end of the current list of existing substitution rules. If a rule with the same from was already defined, then the old rule is also deleted.
    For example, if the file /foo/bar/baz.c was moved to /mnt/cross/baz.c, then the command

    (gdb) set substitute-path /foo/bar /mnt/cross

    will tell GDB to replace ‘/foo/bar’ with ‘/mnt/cross’, which will allow GDB to find the file baz.c even though it was moved.

    In the case when more than one substitution rule have been defined, the rules are evaluated one by one in the order where they have been defined. The first one matching, if any, is selected to perform the substitution.

    For instance, if we had entered the following commands:

    (gdb) set substitute-path /usr/src/include /mnt/include
    (gdb) set substitute-path /usr/src /mnt/src

    GDB would then rewrite /usr/src/include/defs.h into /mnt/include/defs.h by using the first rule. However, it would use the second rule to rewrite /usr/src/lib/foo.c into /mnt/src/lib/foo.c.

unset substitute-path [path]
    If a path is specified, search the current list of substitution rules for a rule that would rewrite that path. Delete that rule if found. A warning is emitted by the debugger if no rule could be found.
    If no path is specified, then all substitution rules are deleted.

show substitute-path [path]
    If a path is specified, then print the source path substitution rule which would rewrite that path, if any.
    If no path is specified, then print all existing source path substitution rules.

If your source path is cluttered with directories that are no longer of interest, GDB may sometimes cause confusion by finding the wrong versions of source. You can correct the situation as follows:
    Use directory with no argument to reset the source path to its default value.
    Use directory with suitable arguments to reinstall the directories you want in the source path. You can add all the directories in one command. 


#follow forks
show detach-on-fork
set follow-fork-mode MODE  #  parent(default), child

show detach-on-fork
set detach-on-fork MODE    #  on(default), off

set follow-exec-mode MODE  # new, same(default)


show detach-on-fork
    Show whether detach-on-fork mode is on/off. 
set follow-fork-mode MODE
     Set the debugger response to a program call of 'fork' or 'vfork'.
     A call to 'fork' or 'vfork' creates a new process.  The MODE
     argument can be:
        'parent'
             The original process is debugged after a fork.  The child
             process runs unimpeded.  This is the default.
        'child'
             The new process is debugged after a fork.  The parent process
             runs unimpeded.

show detach-on-fork
     Show whether detach-on-fork mode is on/off.
set detach-on-fork MODE
     Tells gdb whether to detach one of the processes after a fork, or
     retain debugger control over them both.
        'on'
            The child process (or parent process, depending on the value
            of 'follow-fork-mode') will be detached and allowed to run
            independently.  This is the default.
        'off'
            Both processes will be held under the control of GDB.  One
            process (child or parent, depending on the value of
            'follow-fork-mode') is debugged as usual, while the other is
            held suspended.

set follow-exec-mode MODE
     Set debugger response to a program call of 'exec'.  An 'exec' call
     replaces the program image of a process.
     'follow-exec-mode' can be:
     'new'
          GDB creates a new inferior and rebinds the process to this new
          inferior.  The program the process was running before the
          'exec' call can be restarted afterwards by restarting the
          original inferior.
     'same'
          GDB keeps the process bound to the same inferior.  The new
          executable image replaces the previous executable loaded in
          the inferior.  Restarting the inferior after the 'exec' call,
          with e.g., the 'run' command, restarts the executable the
          process was running after the 'exec' call.  This is the
          default mode.

Non stop mode:
# Enable the async interface.
set target-async 1
 
# If using the CLI, pagination breaks non-stop.
set pagination off
 
# Finally, turn it on!
set non-stop on




по умолчанию подключать отладчик можно только к дочернему процессу.
что бы можно было подключиться к уже запущенному не нами процесу без использования root учетки нужно сделать:
echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope

по идее можно что-то куда-то прописать что бы эта настройка стала персистентной, вроде как:
/etc/sysctl.d/10-ptrace.conf: kernel.yama.ptrace_scope = 0 # именно 0

что бы уметь подключаться к уже запущенному процессу с помощью gdb 

