/*********************************************************************
/*             Qt Creator
/*********************************************************************
style и codestyles находятся в:
linux   - $HOME/.config/QtProject/qtcreator/{styles,codestyles/{Cpp,QmlJS}}
windows - %APPDATA%\QtProject\qtcreator\{styles,codestyles/{Cpp,QmlJS}}

скопировать в эти папки(создать если отсутсвуют) соотвествющие файлы и Qt Creator автоматически их увидет.

Некоторые полезные настройки Qt creator'а, котороые не включены по-умолчанию:
Tools -> Options -> Environment:
  Interface:
    Language:  English
    Theme:     Dark
    High Dpi Scaling: false # это то же самое как если включить QT_AUTO_SCREEN_SCALE_FACTOR - автоматическиое масштабирование, после рисования, плохое

  MIME Types:
    тут можно настроить расширения и ассоциации text/x-c++hdr, Patterns: add *.hqt

Tools -> Options -> Text Editor:

  Font & Colors:
    Color Scheme - Visual Studio 2017

  Behaviour:
    Tab Policy: Mixed
    Tab Size:   4
    Align Continuation Lines: with spaces
    
    Это общие настройки, они так же перенастраивается для C++ и QML
    
  Display:
    Enable Text wrapping: false
    Display Line Numbers: true
    Display file encoding: true
    

Tools -> Options -> C++:
  Code Style: My C++ Style # тут же настройка табов
  File Naming:
    Headers -> Suffix: hpp
  Code Model: Создать новую
    -Wall -Wextra -Wno-unused-parameter -Wsuggest-override



Tools -> Options -> Build and run: General:
  Save all files before build: true
  Open compile output pane when building: true

  Default build directory:
    тут по умолчанию относительный путь выше проекта, стоит поменять на, например, bin
    значение по-умолчанию для версии 4.7 - ../%{JS: Util.asciify("build-%{CurrentProject:Name}-%{CurrentKit:FileSystemName}-%{CurrentBuild:Name}")}



Tools -> Options -> Build and run: General:
  General:
    Switch to previous mode on debugger exit: true


/*********************************************************************
/*             Qt Creator file wizard templates
/*********************************************************************
whenever you create new file/class, they are created according wizard and template.
Those are in: $HOME/.config/QtProject/qtcreator/templates/wizards
              /usr/share/qtcreator/templates/wizards

              files/...   for files: cppheader, cppfile
              classes/... for classse: simple class, item model class, etc

those in $HOME override ones from /usr/share


/*********************************************************************
/*             Qt Creator Clang Code Model Related
/*********************************************************************
Currently clang code model has some bugs for supporting c++17, luckily there are workaroung, see qt bug reports
https://bugreports.qt.io/browse/QTCREATORBUG-20884
https://bugreports.qt.io/browse/QTCREATORBUG-20702
https://bugreports.qt.io/browse/QTCREATORBUG-19348

Вроде пишут в master уже починили, но не тестировал

Так же там упоминаются интресные переменные окружения:
QTC_CLANG_CCM_CMD_PREPEND=-Xclang -std=c++17 # for code model
QTC_CLANG_CSA_CMD_PREPEND=-Xclang -std=c++17 # for analyzer

/*********************************************************************
/*             Qt Creator Debugging
/*********************************************************************
по умолчанию подключать отладчик можно только к дочернему процессу.
что бы можно было подключиться к уже запущенному не нами процесу без использования root учетки нужно сделать:
echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope

по идее можно что-то куда-то прописать что бы эта настройка стала персистентной, вроде как:
/etc/sysctl.d/10-ptrace.conf: kernel.yama.ptrace_scope = 0 # именно 0

что бы уметь поключаться к уже запущенному процессу с помощью gdb 

/*********************************************************************
/*             Qt Creator Spell Checker
/*********************************************************************
Из коробки spell checker'а нету, но есть plugin, активно развивающийся:
https://github.com/CJCombrink/SpellChecker-Plugin

в Arch Linux можно поставить из aur:
для сборки плагина требются исходники qtcreator'а
git clone https://aur.archlinux.org/qtcreator-src.git                      ; makepkg --install --syncdeps --rmdeps
git clone https://aur.archlinux.org/qtcreator-spellchecker-plugin-git.git  ; makepkg --install --syncdeps --rmdeps

Дальше перезапустить qt creator, в Tools -> Options появиться новый раздел, в нем нужно выбрать словарь, английский желательно :)
Обычно словари лежат в /usr/share/hunsplell


/*********************************************************************
/*             qbs, command line
/*********************************************************************
qbs setup-toolchains --detect
qbs setup-qt         --detect
qbs config defaultProfile  qt-5-11-1

qbs help build/...
qbs config preferences.defaultBuildDirectory bin
qbs build config:debug --command-echo-mode command-line

qbs build config:debug profile:qt-5-11-1

qbs resolve config:release modules.cpp.cxxFlags:-fdiagnostics-color
qbs build   config:release modules.cpp.cxxFlags:-fdiagnostics-color --command-echo-mode command-line
