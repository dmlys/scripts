/*********************************************************************
/*             Qt Creator
/*********************************************************************
style и codestyles находятся в:
windows - %APPDATA%\QtProject\qtcreator
linux   - $HOME/.config/QtProject/qtcreator
          .../styles
          .../codestyles/{Cpp,QmlJS}

скопировать в эти папки(создать если отсутствуют) соответствующие файлы и Qt Creator автоматически их увидет.

Некоторые полезные настройки Qt creator'а, которые не включены по-умолчанию:
Tools -> Options -> Environment:
  Interface:
    Language:  English
    Theme:     Dark
    High Dpi Scaling: false # это то же самое как если включить QT_AUTO_SCREEN_SCALE_FACTOR - автоматическое масштабирование, после рисования, плохое

  MIME Types:
    тут можно настроить расширения и ассоциации text/x-c++hdr, Patterns: add *.hqt

Tools -> Options -> Text Editor:

  Font & Colors:
    Color Scheme - Visual Studio 2017

  Behaviour:
    Tab Policy: Mixed
    Tab Size:   4
    Align Continuation Lines: with spaces
    
    Это общие настройки, они так же перенастраивается для C++ и QML
    
  Display:
    Enable Text wrapping: false
    Display Line Numbers: true
    Display file encoding: true
    Visualize Ident: false
    

Tools -> Options -> C++:
  Code Style: My C++ Style # тут же настройка табов
  File Naming:
    Headers -> Suffix: hpp
    Use "#pragma once" instead of "#ifdef" guards

  !!! WARN: Начиная с версии 10, для форматирования прикрутили clang-format(clangd)
     Там тьма настроек и не очень понятно как это все настраивать(нужно курить маны)
     К тому же по-умолчанию все форматируется строго пробелами. И немного не так.
     Старые настройки игнорируются пока включен clang-format - выключить его
  Code Style: ClangFormat settnigs:
    Formatting mode: Disable

  И может быть нужно добавить аттрибут файлу с code style'ом(My C++ Style) read-only/immutable: sudo chattr +i My-C++-Style.xml
  Иначе 10 версия qt creator как-то портит перезатирает настройки, возможно это связано как-то clang-format, а может просто баг

  Code Model: Создать новую(в новых версиях{> 4/6} это отсутствует, новое место пока не нашел)
    -Wall -Wextra -Wno-unused-parameter -Wsuggest-override



Tools -> Options -> Build and run: General:
  Save all files before build: true
  Open compile output pane when building: true

  Default build directory:
    тут по умолчанию относительный путь выше проекта, стоит поменять на, например, bin
    значение по-умолчанию для версии 4.7 - ../%{JS: Util.asciify("build-%{CurrentProject:Name}-%{CurrentKit:FileSystemName}-%{CurrentBuild:Name}")}



Tools -> Options -> Build and run: General:
  General:
    Switch to previous mode on debugger exit: true


/*********************************************************************
/*             Qt Creator file wizard templates
/*********************************************************************
whenever you create new file/class, they are created according wizard and template.
Those are in: $HOME/.config/QtProject/qtcreator/templates/wizards
              /usr/share/qtcreator/templates/wizards

              files/...   for files: cppheader, cppfile
              classes/... for classse: simple class, item model class, etc

those in $HOME override ones from /usr/share


/*********************************************************************
/*             Qt Creator Clang Code Model Related
/*********************************************************************
obsolete, not actual anymore 
Currently clang code model has some bugs for supporting c++17, luckily there are workaround, see qt bug reports
https://bugreports.qt.io/browse/QTCREATORBUG-20884
https://bugreports.qt.io/browse/QTCREATORBUG-20702
https://bugreports.qt.io/browse/QTCREATORBUG-19348

Вроде пишут в master уже починили, но не тестировал

Так же там упоминаются интресные переменные окружения:
QTC_CLANG_CCM_CMD_PREPEND=-Xclang -std=c++17 # for code model
QTC_CLANG_CSA_CMD_PREPEND=-Xclang -std=c++17 # for analyzer

/*********************************************************************
/*             Qt Creator Debugging
/*********************************************************************
по умолчанию подключать отладчик можно только к дочернему процессу.
что бы можно было подключиться к уже запущенному не нами процесу без использования root учетки нужно сделать:
echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope

по идее можно что-то куда-то прописать что бы эта настройка стала персистентной, вроде как:
/etc/sysctl.d/10-ptrace.conf: kernel.yama.ptrace_scope = 0 # именно 0

что бы уметь подключаться к уже запущенному процессу с помощью gdb 

GDB по-умолчанию использует некоторые сигналы для своих нужд. Так sigint приводит к паузе в отладке, но само приложение sigint не получит.
Это можно обойти командой для GDB - handle SIGINT nostop pass
Вводить ее нужно в Tools->Options->Debugger, вкладка GDB -> "Additional startup commands"


/*********************************************************************
/*             Qt Creator Spell Checker
/*********************************************************************
Из коробки spell checker'а нету, но есть plugin, активно развивающийся:
https://github.com/CJCombrink/SpellChecker-Plugin

в Arch Linux можно поставить из aur:
для сборки плагина требются исходники qtcreator'а
git clone https://aur.archlinux.org/qtcreator-src.git                      ; makepkg --install --syncdeps --rmdeps
git clone https://aur.archlinux.org/qtcreator-spellchecker-plugin-git.git  ; makepkg --install --syncdeps --rmdeps

Дальше перезапустить qt creator, в Tools -> Options появиться новый раздел, в нем нужно выбрать словарь, английский желательно :)
Обычно словари лежат в /usr/share/hunsplell


/*********************************************************************
/*             qbs, command line
/*********************************************************************
qbs setup-toolchains --detect
qbs setup-qt         --detect
qbs setup-qt ~/.local/opt/qt-5.11.2/bin/qmake  qt-5.11.2-local-debug
qbs config profiles.qt-5.11.2-local-debug.baseProfile clang           # по умолчанию gcc
qbs config defaultProfile  qt-5-11-1
qbs config defaultProfile  qt-0-0-0-bin

qbs config profiles.x86_64-pc-linux-gnu-gcc-11_1.cpp.libraryPaths '["/home/user/.local/opt/library-ver/lib", "/home/user/.local/opt/library2-ver/lib"]'
qbs config profiles.x86_64-pc-linux-gnu-gcc-11_1.cpp.systemIncludePaths '["/home/user/.local/opt/library-ver/include", "/home/user/.local/opt/library2-ver/include"]'

qbs help build/...
qbs config preferences.defaultBuildDirectory bin

qbs build config:debug --command-echo-mode command-line
qbs build config:debug profile:qt-5-11-1

qbs resolve config:release modules.cpp.cxxFlags:-fdiagnostics-color
qbs build   config:release modules.cpp.cxxFlags:-fdiagnostics-color --command-echo-mode command-line


/*********************************************************************
/*             windows specific
/*********************************************************************
Что бы иметь нормальный англоязычный вывод в консоль от msvc, а не кракозябры - нужно установить английский языковой пакет для Visual Studio
далее в настройках qtcreator'а - Tools -> Options -> Kits -> Some msvc kit -> Force UTF-8 MSVC compiler output

Так же стоит прописать пути к thirdparty библиотекам:
Tools -> Options -> Kits -> Some msvc kit -> Additional Qbs Profile Settings: 
cpp.libraryPaths -> path(s)
cpp.systemIncludePaths -> path(s)


/*********************************************************************
/*             сборка qbs на windows из исходников
/*********************************************************************
https://doc-snapshots.qt.io/qbs-master/building-qbs.html
Просто скачать архив с исходниками не получится. Для сборки нужен git submodule, который не идет в комплекте - проще выкачать git'ом:
  git clone https://github.com/qbs/qbs.git

требуется python и 2 библиотеки для него: beautifulsoup4 lxml
легко установить с помощью pip: pip install beautifulsoup4 lxml

И конечно требуется собранный QT.
cmake'ом не получилось - qtscript как-то странно обрабатывается, и такое ощущение что тут есть какая-о ошибка в cmake скриптах и сборка не проходит
qmake - собирает успешно, но есть нюансы:
 На практике собрать с qt only release static-link + static-runtime не получилось, скорее всего из-за only release.
 Сборка с debug-and-release dynamic-link + dynamic runtime прошла без каких-то либо проблем

qmake -r qbs.pro
nmake
nmake install INSTALL_ROOT=C:\Projects\thirdparty\qbs-v1.22.1 

настраиваем qbs:
   qbs setup-toolchains --detect
   qbs config profiles.MSVC2019-x64.cpp.libraryPaths "Projects\thirdparty\vc142-x64\lib"
   qbs config profiles.MSVC2019-x64.cpp.systemIncludePaths "Projects\thirdparty\vc142-x64\include"

  или для множества путей:
   qbs config profiles.x86_64-pc-linux-gnu-gcc-11_1.cpp.libraryPaths '["/home/user/.local/opt/library-ver/lib", "/home/user/.local/opt/library2-ver/lib"]'
   qbs config profiles.x86_64-pc-linux-gnu-gcc-11_1.cpp.systemIncludePaths '["/home/user/.local/opt/library-ver/include", "/home/user/.local/opt/library2-ver/include"]'

  qt:
   qbs setup-qt "C:\Projects\thirdparty\qt-5.15.1-vc142-x64\bin\qmake.exe" qt-5-15-1-static
   qbs config profiles.qt-5-15-1-static.baseProfile MSVC2019-x64

  defaults:
   qbs config defaultProfile  qt-5-15-1-static
   qbs config preferences.defaultBuildDirectory bin

Готово к использованию
