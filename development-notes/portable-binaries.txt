В целом все что описано ниже работает с очень большими оговорками, и на практике разница между текущей и целевой glibc может быть очень велика.
Руками разрешение этих конфликтов может быть очень муторным.

Единственный адекватный нормальный способ - это поднять целевое окружение, в виде виртуалке или контейнера.
Собрать там нужный компилятор, все необходимые библиотеки и целевой проект





https://stackoverflow.com/questions/8823267/linking-against-older-symbol-version-in-a-so-file
http://insanecoding.blogspot.com/2012/07/creating-portable-linux-binaries.html

Линкуем все статически кроме libc:
  -Wl,static -l..
  -static-libstdc++ -static-libgcc
  
  c помощью readelf смотрим версию GLIBC а так же смотрим ее на целевых машинах
  readelf --dyn-sym $bin                  | grep --only-matching --perl-regexp 'GLIBC_[^\s()]*' | sort --unique --version-sort
  objdump --dynamic-syms --demangle  $bin | grep --only-matching --perl-regexp 'GLIBC_[^\s()]*' | sort --unique --version-sort
  
  
  смотрим какие функции не вписываются и далее с помощьюе .symver и --wrap трюка линкуем с более старой версией
